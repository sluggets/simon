Pay some mind to colors, design sense

GAME-ON-BUTTON
  Set up handler for the "master switch" of sorts, the on/off button. This is going to:
    1) Illuminate the score-count display and ensure it is set to "00".
    2) Toggle on-flag to "true". Other buttons will check this value to decide whether to actually perform any functions/set globals or simply do nothing.
    3) Graphically indicate that "game-on-button" is selected and "game-off-button" is de-selected.

GAME-OFF-BUTTON
  Use "master switch" handler.
    1) Darken score-count display, set to "00".
    2) Toggle on-flag to "false". 
    3) Reset/Erase ALL globals!  
    4) Set all conditions to initial state.

STRICT-MODE-BUTTON

    1) Illuminates strict-mode-indicator
    2) If global user-entered pattern is incorrect, plays error beep, resets
score-count display to zero, and restarts game with new random series of button presses.
    3) Strict-mode-button MUST be pressed and logged into a global BEFORE the start-game-button is pressed.
    4) If strict mode button is pressed after play is started (e.g. a tone and color has already been played) then it is the same as hitting the start button again to start the game over. Check should be length of randomPatternArr?

START-GAME-BUTTON

    1) clears user-entered global array
    2) clears computer-entered global array
    3) sets score-count to "00"
    4) calls random color selector to choose first color to initiate the pattern
    5) utilizes global array to store the first color
    6) will be comparing length of global array to user entered array

COLOR BUTTONS

    1) After user presses a button, that color is appended into the user entry global array. 
    2) If userEntry.length == computerEntry.length, a for loop will compare each element of both arrays for equality. 
    3) If strict mode is enabled, and there is no equality, error beep will sound and start-game-button will be virtually pressed
    4) If strict mode is NOT enabled, and there is no equality, the last appended item in userEntry array will be deleted (slice, pop, whatever). Then the computerEntry array will simply repeat itself.
    5) if there IS equality, then random color selector will add another color to computerEntry array and repeat pattern.

BUTTON PRESS FUNCTION
  Will need a function to do these things:
    1) Play appropriate button sound
    2) Simultaneously darken opacity by whatever percent to just indicate it is pressed.
  This function will of course be utilized by both the computer and the player
  It will take as an argument the color to know what tone to play

ARRAY COMPARING FUNCTION
  Loops through computer-generated array and user-entered array, checking for equality.

CLEAR GLOBALS FUNCTION
  This will clear all the globals, to clear the gaming board

POSSIBLE GLOBALS NEEDED
  1) Boolean "on-flag", true for game on, false means game off
  2) Array of computer-generated button-presses
  3) Array to store use-entered button-presses 
  4) Strict mode boolean flag. Provides indication for checks on what to do if user entered pattern is incorrect.

IF SCORE IS 20 VICTORY CONDITION IS REACHED, NOTIFY PLAYER, START GAME OVER!
RGBA OPACITY FOR DEPRESSED BUTTON
1.0 to 0.3

OPTIONAL KEYBOARD CONTROLS
Maybe add event handlers for keyboard controls

Handle buttons playing on top of each other
